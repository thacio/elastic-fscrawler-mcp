---
version: "2.2"

services:
  setup:
    container_name: es-setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    container_name: elasticsearch
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=elasticsearch
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      # ML Configuration for E5 and other models
      - xpack.ml.enabled=true
      - xpack.ml.max_machine_memory_percent=50
      - xpack.ml.max_model_memory_limit=10gb
      - xpack.ml.use_auto_machine_memory_percent=false
      # JVM heap size (should be ~50% of container memory)
      - "ES_JAVA_OPTS=-Xms10g -Xmx10g"
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      # Kibana optimization for ML interface
      - "NODE_OPTIONS=--max-old-space-size=4096"
    mem_limit: 8gb
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # E5 Model Setup
  e5-setup:
    container_name: e5-setup
    image: curlimages/curl:latest
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    command: >
      sh -c '
        echo "Waiting for Elasticsearch to be fully ready..."
        sleep 30
        
        echo "Creating E5 inference endpoint..."
        curl -k -u elastic:${ELASTIC_PASSWORD} -X PUT "https://elasticsearch:9200/_inference/text_embedding/my-e5-model" \
          -H "Content-Type: application/json" \
          -d "{
            \"service\": \"elasticsearch\",
            \"service_settings\": {
              \"num_allocations\": 1,
              \"num_threads\": 1,
              \"model_id\": \".multilingual-e5-small\"
            }
          }" || echo "E5 endpoint may already exist"
        
        echo "Waiting for E5 model to be ready..."
        sleep 60
        
        echo "Creating semantic documents index with hybrid search support..."
        curl -k -u elastic:${ELASTIC_PASSWORD} -X PUT "https://elasticsearch:9200/documents" \
          -H "Content-Type: application/json" \
          -d "{
            \"mappings\": {
              \"properties\": {
                \"title\": {
                  \"type\": \"text\",
                  \"copy_to\": \"content_semantic\"
                },
                \"content\": {
                  \"type\": \"text\",
                  \"index_options\": \"offsets\",
                  \"term_vector\": \"with_positions_offsets\",
                  \"copy_to\": \"content_semantic\"
                },
                \"content_semantic\": {
                  \"type\": \"semantic_text\",
                  \"inference_id\": \"my-e5-model\"
                },
                \"path\": {
                  \"properties\": {
                    \"real\": {
                      \"type\": \"keyword\"
                    },
                    \"root\": {
                      \"type\": \"keyword\"
                    },
                    \"virtual\": {
                      \"type\": \"keyword\"
                    }
                  }
                },
                \"file\": {
                  \"properties\": {
                    \"content_type\": {
                      \"type\": \"keyword\"
                    },
                    \"filename\": {
                      \"type\": \"keyword\"
                    },
                    \"extension\": {
                      \"type\": \"keyword\"
                    },
                    \"filesize\": {
                      \"type\": \"long\"
                    },
                    \"last_modified\": {
                      \"type\": \"date\"
                    },
                    \"created\": {
                      \"type\": \"date\"
                    }
                  }
                },
                \"meta\": {
                  \"properties\": {
                    \"author\": {
                      \"type\": \"text\"
                    },
                    \"title\": {
                      \"type\": \"text\"
                    },
                    \"date\": {
                      \"type\": \"date\"
                    },
                    \"keywords\": {
                      \"type\": \"text\"
                    }
                  }
                }
              }
            }
          }" || echo "Semantic index may already exist"
        
        echo "Creating ingest pipeline for semantic documents..."
        curl -k -u elastic:${ELASTIC_PASSWORD} -X PUT "https://elasticsearch:9200/_ingest/pipeline/documents_pipeline" \
          -H "Content-Type: application/json" \
          -d "{
            \"description\": \"Pipeline to automatically populate semantic field from document content\",
            \"processors\": [
              {
                \"set\": {
                  \"field\": \"content_semantic\",
                  \"value\": \"{{content}}\"
                }
              }
            ]
          }" || echo "Pipeline may already exist"
        
        echo "E5 setup completed!"
        
        echo "Waiting for FSCrawler to start indexing documents..."
        sleep 30
        
        echo "Testing semantic search functionality..."
        curl -k -u elastic:${ELASTIC_PASSWORD} -X POST "https://elasticsearch:9200/documents/_search?pretty" \
          -H "Content-Type: application/json" \
          -d "{
            \"query\": {
              \"match_all\": {}
            },
            \"size\": 1
          }"
        
        echo "Creating hybrid search example queries..."
        echo "Hybrid search is now configured! Use RRF retrievers for hybrid search."
        echo "Example hybrid search query:"
        echo "curl -k -u elastic:${ELASTIC_PASSWORD} -X POST \"https://elasticsearch:9200/documents/_search?pretty\" \\"
        echo "  -H \"Content-Type: application/json\" \\"
        echo "  -d \"{\\"
        echo "    \\\"retriever\\\": {\\"
        echo "      \\\"rrf\\\": {\\"
        echo "        \\\"retrievers\\\": [\\"
        echo "          {\\"
        echo "            \\\"standard\\\": {\\"
        echo "              \\\"query\\\": {\\"
        echo "                \\\"multi_match\\\": {\\"
        echo "                  \\\"query\\\": \\\"your search terms\\\",\\"
        echo "                  \\\"fields\\\": [\\\"content\\\", \\\"title\\\", \\\"meta.title\\\"]\\"
        echo "                }\\"
        echo "              }\\"
        echo "            }\\"
        echo "          },\\"
        echo "          {\\"
        echo "            \\\"standard\\\": {\\"
        echo "              \\\"query\\\": {\\"
        echo "                \\\"semantic\\\": {\\"
        echo "                  \\\"field\\\": \\\"content_semantic\\\",\\"
        echo "                  \\\"query\\\": \\\"your search terms\\\"\\"
        echo "                }\\"
        echo "              }\\"
        echo "            }\\"
        echo "          }\\"
        echo "        ],\\"
        echo "        \\\"rank_window_size\\\": 50,\\"
        echo "        \\\"rank_constant\\\": 20\\"
        echo "      }\\"
        echo "    },\\"
        echo "    \\\"size\\\": 10\\"
        echo "  }\""
        
        echo "Setup verification completed!"
      '
    restart: "no"

  # FSCrawler
  fscrawler:
    image: dadoonet/fscrawler:${FSCRAWLER_VERSION}
    container_name: fscrawler
    restart: always
    environment:
      - FS_JAVA_OPTS=${FS_JAVA_OPTS}
    volumes:
      - ./elastic_documents:/tmp/es:ro
      - ${PWD}/config:/root/.fscrawler
      - ${PWD}/logs:/usr/share/fscrawler/logs
      - ${PWD}/external:/usr/share/fscrawler/external
    depends_on:
      elasticsearch:
        condition: service_healthy
      e5-setup:
        condition: service_completed_successfully
    ports:
      - ${FSCRAWLER_PORT}:8080
    command: idx --restart --rest

  # MCP Server
  mcp-server:
    build: ./mcp-server
    container_name: mcp-server
    restart: always
    environment:
      - ES_HOST=https://elasticsearch:9200
      - ES_USER=elastic
      - ES_PASS=${ELASTIC_PASSWORD}
      - ES_DEFAULT_INDEX=documents
    depends_on:
      elasticsearch:
        condition: service_healthy
      e5-setup:
        condition: service_completed_successfully
    ports:
      - "9876:8080"
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  certs:
    driver: local
  esdata:
    driver: local
  kibanadata:
    driver: local
